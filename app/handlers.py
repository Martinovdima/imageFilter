from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram import types
from bd import create_or_get_user, add_image_processing_request, update_processed_image
import app.keyboard as kb
import os
import traceback
from aiogram.utils.chat_action import ChatActionSender
from functions import convert_to_pixel_openCV, convert_to_cartoon_openCV, convert_to_pencil_openCV


router = Router()

class ImageProcessing(StatesGroup):
    waiting_for_image = State()
@router.message(CommandStart())
async def cmd_start(message: Message):
    await create_or_get_user(message.from_user.id, message.from_user.username)
    photo = FSInputFile("image/collage.webp")
    text = "üîπ –≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ç–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üîπ\n\nüì∏ –í—ã–±–∏—Ä–∞–π —Ñ–æ—Ä–º–∞—Ç... üì∏"
    await message.answer_photo(photo=photo, caption=text, reply_markup=await kb.art_keyboard())

@router.message(Command('help'))
async def help(message: Message):
    photo = FSInputFile('image/help.jpg')
    text = ("üé® –≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ç–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üé®\n\nüì∏   –í—ã–±–∏—Ä–∞–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫   üì∏"
            "\n\nüìÇ   –ó–∞–≥—Ä—É–∂–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ   üìÇ\n\nüíæ    –°–∫–∞—á–∏–≤–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç    üíæ")
    await message.answer_photo(photo=photo, caption=text)

@router.callback_query(F.data.startswith("art_"))
async def process_art_callback(callback: types.CallbackQuery, state: FSMContext):
    selected_art = callback.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
    await state.update_data(selected_art=selected_art)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å üì∑")

    await state.set_state(ImageProcessing.waiting_for_image)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º FSM –≤ –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ

    current_state = await state.get_state()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print(f"üìå –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback (—É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏")

@router.message(ImageProcessing.waiting_for_image, F.photo)
async def process_image(message: types.Message, state: FSMContext):
    try:
        print(f'üì∏ –ü–æ–π–º–∞–ª —Ñ–æ—Ç–æ')

        from main import bot  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤

        async with ChatActionSender.upload_photo(bot, message.chat.id):
            user_data = await state.get_data()
            selected_art = user_data.get("selected_art")
            if selected_art not in ['PIXEL', 'CARTOON', 'PENCIL']:
                text = "‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç\n\nüì∏ –í—ã–±–∏—Ä–∞–π... üì∏"
                await message.answer(text=text, reply_markup=await kb.art_keyboard())

            print(f'üé® –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä: {selected_art}')

            photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
            file_id = photo.file_id
            user_id = message.from_user.id
            file_info = await bot.get_file(photo.file_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            request_id = await add_image_processing_request(user_id, file_id, selected_art)
            print(f'–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
            file_path = file_info.file_path

            print(f'üìÇ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ Telegram: {file_path}')

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_name = os.path.basename(file_path)
            save_path = os.path.join("infotos", file_name)
            await bot.download_file(file_path, save_path)

            print(f'üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {save_path}')

            await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª—å—Ç—Ä: {selected_art}\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")

            # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –≤ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if selected_art == 'PIXEL':
                processed_photo_path = await convert_to_pixel_openCV(save_path, file_name)
            elif selected_art == 'CARTOON':
                processed_photo_path = await convert_to_cartoon_openCV(save_path, file_name)
            elif selected_art == 'PENCIL':
                processed_photo_path = await convert_to_pencil_openCV(save_path, file_name)
            else:
                await message.answer(f"–¢–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ—Ç!")

            print(f'‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {processed_photo_path}')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            output_path = FSInputFile(processed_photo_path)
            text = "üî∂ –¢–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ! üî∂\n\nüì∏ –í—ã–±–∏—Ä–∞–π —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç... üì∏"
            sent_message = await message.answer_photo(photo=output_path, caption=text, reply_markup=await kb.art_keyboard())

            if sent_message.photo:
                sent_file_id = sent_message.photo[-1].file_id
                await update_processed_image(request_id, sent_file_id)
            else:
                print('‚ö†Ô∏è –û—à–∏–±–∫–∞: sent_message.photo = None')
            os.remove(save_path)
            os.remove(processed_photo_path)

            await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print('üßπ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–æ')

    except Exception as e:
        print(f'‚ö† –û—à–∏–±–∫–∞: {e}')
        print(traceback.format_exc())  # –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –æ—à–∏–±–∫–∏
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")

@router.message(F.photo)
async def send_foto(message: types.Message):
    text = "‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç \n\nüì∏ –í—ã–±–∏—Ä–∞–π... üì∏"
    await message.answer(text=text, reply_markup=await kb.art_keyboard())

@router.message(~F.photo)
async def handle_non_photo_messages(message: types.Message):
    await message.answer("–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ! üì∑")